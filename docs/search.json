[
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "ECE244 tidy notes",
    "section": "Motivation",
    "text": "Motivation\nWe will learn about a programming paradigm (style/philosophy of programming) called object-oriented programming using C++"
  },
  {
    "objectID": "index.html#why-object-oriented-programming",
    "href": "index.html#why-object-oriented-programming",
    "title": "ECE244 tidy notes",
    "section": "Why object-oriented programming?",
    "text": "Why object-oriented programming?\n\nModular code — divide code into independent pieces\nReusable code\nEasily extend code\nEasier to maintain\nEasier to collaborate with large teams\nPopular programming paradigm"
  },
  {
    "objectID": "index.html#why-c",
    "href": "index.html#why-c",
    "title": "ECE244 tidy notes",
    "section": "Why C++?",
    "text": "Why C++?\n\nGenerally C/C++ are more difficult as they are closer to the hardware\nCan manage memory\nEasier to learn other languages once you know C/C++"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ECE244 Tidy Notes",
    "section": "",
    "text": "This course provides a foundation in programming using an object-oriented programming language. Topics include classes and objects, inheritance, basic data structures (lists, tree, hash tables, etc.), Big-O complexity analysis, and testing and debugging. The laboratory assignments emphasize the use of object-oriented programming constructs in the design and implementation of reasonably large programs."
  },
  {
    "objectID": "lecture2.html#today",
    "href": "lecture2.html#today",
    "title": "Lecture 2",
    "section": "Today",
    "text": "Today\nIntroduction to C++"
  },
  {
    "objectID": "lecture2.html#assumption",
    "href": "lecture2.html#assumption",
    "title": "Lecture 2",
    "section": "Assumption",
    "text": "Assumption\nYou are familiar with basic C programming (i.e., data types, variables, if statements, loops and functions)"
  },
  {
    "objectID": "lecture2.html#structure-of-a-c-program",
    "href": "lecture2.html#structure-of-a-c-program",
    "title": "Lecture 2",
    "section": "Structure of a C++ program",
    "text": "Structure of a C++ program\n\nHello world printing in C++\n#include &lt;iostream&gt; // standard I/O library in C++\nusing namespace std; // container for \"names\"\nint main() {\n    // cout: output in C++\n    // &lt;&lt;: operator to output\n    // endl: end of line or new line\n    cout &lt;&lt; \"Hello world!\" &lt;&lt; endl;\n    return 0;\n}\nRecall in C it was:\n#include &lt;studio.h&gt;\nint main() {\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n\n\nUser enters a value\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n    // cin: input in C++\n    // &gt;&gt;: operator to input\n    // &lt;&lt; value: output a variable\n    int value;\n    cout &lt;&lt; \"Enter an integer: \" &lt;&lt; endl;\n    cin &gt;&gt; value;\n    cout &lt;&lt; \"The integer is: \" &lt;&lt; value &lt;&lt; endl;\n    return 0;\n}\nRecall in C it was:\n#include &lt;studio.h&gt;\nint main() {\n    int value;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &value);\n    printf(\"The integer is: %d\\n\", value);\n    return 0;\n}\n\n\nData types in C++ and C\nThese are similar between the two languages.\nIntegers: 7, 10, 0, -200 (e.g., int attendees 126;)\n\nint: 32 bits, with range -2^31 to 2^31-1\nshort: 16 bits, with range -2^15 to 2^15-1\nlong: &gt;= 32 bits\n\nReal numbers: 2.7, -101.25 (e.g. double height = 1.72;)\n\nfloat: 32 bits, with 7 digits precision\ndouble: 64 bits, with 15 digits precision\nlong double: &gt;= 64 bits, with 19 digits precision\n\nCharacters: a, b, $ (e.g. char firstInitial = 's';)\nLogic: true, false (e.g. bool isRaining = false;)\nArrays can be used to store multiple data elements of same type under one variable (e.g. int arr[7] = {1, 2, 3, 4, 5, 6, 7};).\nStrings, in C, were null-terminted character arrays (e.g. char h[6] = \"hello\";). Hello is 5 characters, but we need 6 to store the null character as in hello\\0.\nIn C, you can access the string library functions strcmp, strl;en, strcpy from # include &lt;string.h&gt; (e.g. int x = strlen(str)).\nIn C++, we have a string “class” that allows you to create a string type variable. You need to include it using #include &lt;string&gt; (e.g. string courseTitle = \"Programming Fundamentals\";).\nYou can do interesting operations on strings with\n\n+: concatenate\n==: equal to\n!=: not equal to\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    // == compares strings\n    string courseDepart, courseNum, courseCode;\n    cout &lt;&lt; \"Enter the course department and code: \" &lt;&lt; endl;\n    cin &gt;&gt; courseDepart &gt;&gt; courseNum;\n    courseCode = courseDepart + courseNum;\n    if (courseCode == \"ECE244\") {\n        cout &lt;&lt; \"That's Programming Fundamentals\" &lt;&lt; endl;\n    }\n    return 0;\n}\n\n\nExpressions and statements\nThese are the same as C\n\nArithmetic and relational expressions: x + y, x &gt;= y\nLogical conditions: A || B, A && B, !A\nDecision-making: if and if-else statements\nRepetition: while, do-while, and for loops\n\n\n\nFunctions\nAll code must have at least one function (i.e., main function)\nFunctions allow you to\n\nDivide code into pieces\nAvoid repetition -&gt; you can reuse code\nEasier to debug\n\nExample: Write a function that gets the factorial of a number\n\\[\nn! = n \\times (n-1) \\times (n-2) \\times \\cdots 3 \\times 2 \\times 1\n\\]\n// Function definition\nint factorial(int n) {\n    int fact = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\nint main() {\n    int n = 4;\n    // fact: return value stored in fact\n    // factorial(n): pass variable\n    int fact = factorial(n);\n    cout &lt;&lt; \"Factorial of \" &lt;&lt; n &lt;&lt; \" is \" &lt;&lt; fact &lt;&lt; endl;\n    return 0;\n}\nWe can’t call a function before it’s declaration. It’s good practice to declare functions first and then define them after the main function.\n// Function declaration\nint factorial(int n); // or int factorial(int);\n\n// for int factorial(int);\n// the first int is the return type\n// the second int is the parameter type\n\nint main() {\n    int n = 4;\n    // fact: return value stored in fact\n    // factorial(n): pass variable\n    int fact = factorial(n);\n    cout &lt;&lt; \"Factorial of \" &lt;&lt; n &lt;&lt; \" is \" &lt;&lt; fact &lt;&lt; endl;\n    return 0;\n}\n\n// Function definition\nint factorial(int n) {\n    int fact = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}"
  },
  {
    "objectID": "index.html#about-ece244---programming-fundamentals",
    "href": "index.html#about-ece244---programming-fundamentals",
    "title": "ECE244 Tidy Notes",
    "section": "About ECE244 - Programming Fundamentals",
    "text": "About ECE244 - Programming Fundamentals\nThis course provides a foundation in programming using an object-oriented programming language. Topics include classes and objects, inheritance, basic data structures (lists, tree, hash tables, etc.), Big-O complexity analysis, and testing and debugging. The laboratory assignments emphasize the use of object-oriented programming constructs in the design and implementation of reasonably large programs."
  }
]